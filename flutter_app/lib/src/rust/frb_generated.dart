// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/fungi.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiFungiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 484425731;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_fungi_app',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiFungiAddFileTransferClient({
    required bool enabled,
    String? name,
    required String peerId,
  });

  void crateApiFungiAddIncomingAllowedPeer({required String peerId});

  void crateApiFungiAddOrUpdateKnownPeer({
    required String peerId,
    String? hostname,
  });

  Future<String> crateApiFungiAddTcpForwardingRule({
    required String localHost,
    required int localPort,
    required String peerId,
    required int remotePort,
  });

  Future<String> crateApiFungiAddTcpListeningRule({
    required String localHost,
    required int localPort,
    required List<String> allowedPeers,
  });

  String crateApiFungiConfigFilePath();

  Future<void> crateApiFungiEnableFileTransferClient({
    required String peerId,
    required bool enabled,
  });

  List<PeerInfo> crateApiFungiGetAllAddressBook();

  List<FileTransferClient> crateApiFungiGetAllFileTransferClients();

  bool crateApiFungiGetFileTransferServiceEnabled();

  String crateApiFungiGetFileTransferServiceRootDir();

  FtpProxy crateApiFungiGetFtpProxy();

  List<String> crateApiFungiGetIncomingAllowedPeersList();

  List<PeerWithInfo> crateApiFungiGetIncomingAllowedPeersWithInfo();

  PeerInfo? crateApiFungiGetKnownPeerInfo({required String peerId});

  Future<List<PeerInfo>> crateApiFungiGetLocalDevices();

  TcpTunnelingConfig crateApiFungiGetTcpTunnelingConfig();

  WebdavProxy crateApiFungiGetWebdavProxy();

  String? crateApiFungiHostName();

  Future<void> crateApiFungiInitApp();

  String crateApiFungiPeerId();

  void crateApiFungiRemoveFileTransferClient({required String peerId});

  void crateApiFungiRemoveIncomingAllowedPeer({required String peerId});

  void crateApiFungiRemoveKnownPeer({required String peerId});

  void crateApiFungiRemoveTcpForwardingRule({required String ruleId});

  void crateApiFungiRemoveTcpListeningRule({required String ruleId});

  Future<void> crateApiFungiStartFileTransferService({required String rootDir});

  Future<void> crateApiFungiStartFungiDaemon();

  void crateApiFungiStopFileTransferService();

  void crateApiFungiUpdateFtpProxy({
    required bool enabled,
    required String host,
    required int port,
  });

  void crateApiFungiUpdateWebdavProxy({
    required bool enabled,
    required String host,
    required int port,
  });
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiFungiAddFileTransferClient({
    required bool enabled,
    String? name,
    required String peerId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(enabled, serializer);
          sse_encode_opt_String(name, serializer);
          sse_encode_String(peerId, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiAddFileTransferClientConstMeta,
        argValues: [enabled, name, peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiAddFileTransferClientConstMeta =>
      const TaskConstMeta(
        debugName: "add_file_transfer_client",
        argNames: ["enabled", "name", "peerId"],
      );

  @override
  void crateApiFungiAddIncomingAllowedPeer({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiAddIncomingAllowedPeerConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiAddIncomingAllowedPeerConstMeta =>
      const TaskConstMeta(
        debugName: "add_incoming_allowed_peer",
        argNames: ["peerId"],
      );

  @override
  void crateApiFungiAddOrUpdateKnownPeer({
    required String peerId,
    String? hostname,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          sse_encode_opt_String(hostname, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiAddOrUpdateKnownPeerConstMeta,
        argValues: [peerId, hostname],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiAddOrUpdateKnownPeerConstMeta =>
      const TaskConstMeta(
        debugName: "add_or_update_known_peer",
        argNames: ["peerId", "hostname"],
      );

  @override
  Future<String> crateApiFungiAddTcpForwardingRule({
    required String localHost,
    required int localPort,
    required String peerId,
    required int remotePort,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(localHost, serializer);
          sse_encode_u_16(localPort, serializer);
          sse_encode_String(peerId, serializer);
          sse_encode_u_16(remotePort, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiAddTcpForwardingRuleConstMeta,
        argValues: [localHost, localPort, peerId, remotePort],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiAddTcpForwardingRuleConstMeta =>
      const TaskConstMeta(
        debugName: "add_tcp_forwarding_rule",
        argNames: ["localHost", "localPort", "peerId", "remotePort"],
      );

  @override
  Future<String> crateApiFungiAddTcpListeningRule({
    required String localHost,
    required int localPort,
    required List<String> allowedPeers,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(localHost, serializer);
          sse_encode_u_16(localPort, serializer);
          sse_encode_list_String(allowedPeers, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiAddTcpListeningRuleConstMeta,
        argValues: [localHost, localPort, allowedPeers],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiAddTcpListeningRuleConstMeta =>
      const TaskConstMeta(
        debugName: "add_tcp_listening_rule",
        argNames: ["localHost", "localPort", "allowedPeers"],
      );

  @override
  String crateApiFungiConfigFilePath() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiConfigFilePathConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiConfigFilePathConstMeta =>
      const TaskConstMeta(debugName: "config_file_path", argNames: []);

  @override
  Future<void> crateApiFungiEnableFileTransferClient({
    required String peerId,
    required bool enabled,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          sse_encode_bool(enabled, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiEnableFileTransferClientConstMeta,
        argValues: [peerId, enabled],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiEnableFileTransferClientConstMeta =>
      const TaskConstMeta(
        debugName: "enable_file_transfer_client",
        argNames: ["peerId", "enabled"],
      );

  @override
  List<PeerInfo> crateApiFungiGetAllAddressBook() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_peer_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetAllAddressBookConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetAllAddressBookConstMeta =>
      const TaskConstMeta(debugName: "get_all_address_book", argNames: []);

  @override
  List<FileTransferClient> crateApiFungiGetAllFileTransferClients() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_file_transfer_client,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetAllFileTransferClientsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetAllFileTransferClientsConstMeta =>
      const TaskConstMeta(
        debugName: "get_all_file_transfer_clients",
        argNames: [],
      );

  @override
  bool crateApiFungiGetFileTransferServiceEnabled() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetFileTransferServiceEnabledConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetFileTransferServiceEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "get_file_transfer_service_enabled",
        argNames: [],
      );

  @override
  String crateApiFungiGetFileTransferServiceRootDir() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetFileTransferServiceRootDirConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetFileTransferServiceRootDirConstMeta =>
      const TaskConstMeta(
        debugName: "get_file_transfer_service_root_dir",
        argNames: [],
      );

  @override
  FtpProxy crateApiFungiGetFtpProxy() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_ftp_proxy,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetFtpProxyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetFtpProxyConstMeta =>
      const TaskConstMeta(debugName: "get_ftp_proxy", argNames: []);

  @override
  List<String> crateApiFungiGetIncomingAllowedPeersList() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetIncomingAllowedPeersListConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetIncomingAllowedPeersListConstMeta =>
      const TaskConstMeta(
        debugName: "get_incoming_allowed_peers_list",
        argNames: [],
      );

  @override
  List<PeerWithInfo> crateApiFungiGetIncomingAllowedPeersWithInfo() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_peer_with_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetIncomingAllowedPeersWithInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetIncomingAllowedPeersWithInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_incoming_allowed_peers_with_info",
        argNames: [],
      );

  @override
  PeerInfo? crateApiFungiGetKnownPeerInfo({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_peer_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetKnownPeerInfoConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetKnownPeerInfoConstMeta =>
      const TaskConstMeta(
        debugName: "get_known_peer_info",
        argNames: ["peerId"],
      );

  @override
  Future<List<PeerInfo>> crateApiFungiGetLocalDevices() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_peer_info,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetLocalDevicesConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetLocalDevicesConstMeta =>
      const TaskConstMeta(debugName: "get_local_devices", argNames: []);

  @override
  TcpTunnelingConfig crateApiFungiGetTcpTunnelingConfig() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_tcp_tunneling_config,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetTcpTunnelingConfigConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetTcpTunnelingConfigConstMeta =>
      const TaskConstMeta(debugName: "get_tcp_tunneling_config", argNames: []);

  @override
  WebdavProxy crateApiFungiGetWebdavProxy() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_webdav_proxy,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiGetWebdavProxyConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiGetWebdavProxyConstMeta =>
      const TaskConstMeta(debugName: "get_webdav_proxy", argNames: []);

  @override
  String? crateApiFungiHostName() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFungiHostNameConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiHostNameConstMeta =>
      const TaskConstMeta(debugName: "host_name", argNames: []);

  @override
  Future<void> crateApiFungiInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiFungiInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  String crateApiFungiPeerId() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiPeerIdConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiPeerIdConstMeta =>
      const TaskConstMeta(debugName: "peer_id", argNames: []);

  @override
  void crateApiFungiRemoveFileTransferClient({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiRemoveFileTransferClientConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiRemoveFileTransferClientConstMeta =>
      const TaskConstMeta(
        debugName: "remove_file_transfer_client",
        argNames: ["peerId"],
      );

  @override
  void crateApiFungiRemoveIncomingAllowedPeer({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiRemoveIncomingAllowedPeerConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiRemoveIncomingAllowedPeerConstMeta =>
      const TaskConstMeta(
        debugName: "remove_incoming_allowed_peer",
        argNames: ["peerId"],
      );

  @override
  void crateApiFungiRemoveKnownPeer({required String peerId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(peerId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiRemoveKnownPeerConstMeta,
        argValues: [peerId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiRemoveKnownPeerConstMeta =>
      const TaskConstMeta(debugName: "remove_known_peer", argNames: ["peerId"]);

  @override
  void crateApiFungiRemoveTcpForwardingRule({required String ruleId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ruleId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiRemoveTcpForwardingRuleConstMeta,
        argValues: [ruleId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiRemoveTcpForwardingRuleConstMeta =>
      const TaskConstMeta(
        debugName: "remove_tcp_forwarding_rule",
        argNames: ["ruleId"],
      );

  @override
  void crateApiFungiRemoveTcpListeningRule({required String ruleId}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ruleId, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiRemoveTcpListeningRuleConstMeta,
        argValues: [ruleId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiRemoveTcpListeningRuleConstMeta =>
      const TaskConstMeta(
        debugName: "remove_tcp_listening_rule",
        argNames: ["ruleId"],
      );

  @override
  Future<void> crateApiFungiStartFileTransferService({
    required String rootDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(rootDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiStartFileTransferServiceConstMeta,
        argValues: [rootDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiStartFileTransferServiceConstMeta =>
      const TaskConstMeta(
        debugName: "start_file_transfer_service",
        argNames: ["rootDir"],
      );

  @override
  Future<void> crateApiFungiStartFungiDaemon() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiStartFungiDaemonConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiStartFungiDaemonConstMeta =>
      const TaskConstMeta(debugName: "start_fungi_daemon", argNames: []);

  @override
  void crateApiFungiStopFileTransferService() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiStopFileTransferServiceConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiStopFileTransferServiceConstMeta =>
      const TaskConstMeta(
        debugName: "stop_file_transfer_service",
        argNames: [],
      );

  @override
  void crateApiFungiUpdateFtpProxy({
    required bool enabled,
    required String host,
    required int port,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(enabled, serializer);
          sse_encode_String(host, serializer);
          sse_encode_u_16(port, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiUpdateFtpProxyConstMeta,
        argValues: [enabled, host, port],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiUpdateFtpProxyConstMeta =>
      const TaskConstMeta(
        debugName: "update_ftp_proxy",
        argNames: ["enabled", "host", "port"],
      );

  @override
  void crateApiFungiUpdateWebdavProxy({
    required bool enabled,
    required String host,
    required int port,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(enabled, serializer);
          sse_encode_String(host, serializer);
          sse_encode_u_16(port, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateApiFungiUpdateWebdavProxyConstMeta,
        argValues: [enabled, host, port],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiFungiUpdateWebdavProxyConstMeta =>
      const TaskConstMeta(
        debugName: "update_webdav_proxy",
        argNames: ["enabled", "host", "port"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PeerInfo dco_decode_box_autoadd_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_peer_info(raw);
  }

  @protected
  FileTransferClient dco_decode_file_transfer_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FileTransferClient(
      enabled: dco_decode_bool(arr[0]),
      name: dco_decode_opt_String(arr[1]),
      peerId: dco_decode_String(arr[2]),
    );
  }

  @protected
  ForwardingRule dco_decode_forwarding_rule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ForwardingRule(
      localHost: dco_decode_String(arr[0]),
      localPort: dco_decode_u_16(arr[1]),
      remotePeerId: dco_decode_String(arr[2]),
      remotePort: dco_decode_u_16(arr[3]),
    );
  }

  @protected
  FtpProxy dco_decode_ftp_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FtpProxy(
      enabled: dco_decode_bool(arr[0]),
      host: dco_decode_String(arr[1]),
      port: dco_decode_u_16(arr[2]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<FileTransferClient> dco_decode_list_file_transfer_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_file_transfer_client).toList();
  }

  @protected
  List<ForwardingRule> dco_decode_list_forwarding_rule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_forwarding_rule).toList();
  }

  @protected
  List<ListeningRule> dco_decode_list_listening_rule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_listening_rule).toList();
  }

  @protected
  List<PeerInfo> dco_decode_list_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_peer_info).toList();
  }

  @protected
  List<PeerWithInfo> dco_decode_list_peer_with_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_peer_with_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  ListeningRule dco_decode_listening_rule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ListeningRule(
      host: dco_decode_String(arr[0]),
      port: dco_decode_u_16(arr[1]),
      allowedPeers: dco_decode_list_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PeerInfo? dco_decode_opt_box_autoadd_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_peer_info(raw);
  }

  @protected
  PeerInfo dco_decode_peer_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return PeerInfo(
      peerId: dco_decode_String(arr[0]),
      hostname: dco_decode_opt_String(arr[1]),
      os: dco_decode_String(arr[2]),
      publicIp: dco_decode_opt_String(arr[3]),
      privateIps: dco_decode_list_String(arr[4]),
      createdAt: dco_decode_u_64(arr[5]),
      lastConnected: dco_decode_u_64(arr[6]),
      version: dco_decode_String(arr[7]),
    );
  }

  @protected
  PeerWithInfo dco_decode_peer_with_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PeerWithInfo(
      peerId: dco_decode_String(arr[0]),
      peerInfo: dco_decode_opt_box_autoadd_peer_info(arr[1]),
    );
  }

  @protected
  TcpTunnelingConfig dco_decode_tcp_tunneling_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TcpTunnelingConfig(
      forwardingEnabled: dco_decode_bool(arr[0]),
      listeningEnabled: dco_decode_bool(arr[1]),
      forwardingRules: dco_decode_list_forwarding_rule(arr[2]),
      listeningRules: dco_decode_list_listening_rule(arr[3]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  WebdavProxy dco_decode_webdav_proxy(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WebdavProxy(
      enabled: dco_decode_bool(arr[0]),
      host: dco_decode_String(arr[1]),
      port: dco_decode_u_16(arr[2]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PeerInfo sse_decode_box_autoadd_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_peer_info(deserializer));
  }

  @protected
  FileTransferClient sse_decode_file_transfer_client(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enabled = sse_decode_bool(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_peerId = sse_decode_String(deserializer);
    return FileTransferClient(
      enabled: var_enabled,
      name: var_name,
      peerId: var_peerId,
    );
  }

  @protected
  ForwardingRule sse_decode_forwarding_rule(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_localHost = sse_decode_String(deserializer);
    var var_localPort = sse_decode_u_16(deserializer);
    var var_remotePeerId = sse_decode_String(deserializer);
    var var_remotePort = sse_decode_u_16(deserializer);
    return ForwardingRule(
      localHost: var_localHost,
      localPort: var_localPort,
      remotePeerId: var_remotePeerId,
      remotePort: var_remotePort,
    );
  }

  @protected
  FtpProxy sse_decode_ftp_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enabled = sse_decode_bool(deserializer);
    var var_host = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    return FtpProxy(enabled: var_enabled, host: var_host, port: var_port);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<FileTransferClient> sse_decode_list_file_transfer_client(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FileTransferClient>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_file_transfer_client(deserializer));
    }
    return ans_;
  }

  @protected
  List<ForwardingRule> sse_decode_list_forwarding_rule(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ForwardingRule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_forwarding_rule(deserializer));
    }
    return ans_;
  }

  @protected
  List<ListeningRule> sse_decode_list_listening_rule(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ListeningRule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_listening_rule(deserializer));
    }
    return ans_;
  }

  @protected
  List<PeerInfo> sse_decode_list_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PeerInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_peer_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<PeerWithInfo> sse_decode_list_peer_with_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PeerWithInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_peer_with_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  ListeningRule sse_decode_listening_rule(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_host = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_allowedPeers = sse_decode_list_String(deserializer);
    return ListeningRule(
      host: var_host,
      port: var_port,
      allowedPeers: var_allowedPeers,
    );
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PeerInfo? sse_decode_opt_box_autoadd_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_peer_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PeerInfo sse_decode_peer_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peerId = sse_decode_String(deserializer);
    var var_hostname = sse_decode_opt_String(deserializer);
    var var_os = sse_decode_String(deserializer);
    var var_publicIp = sse_decode_opt_String(deserializer);
    var var_privateIps = sse_decode_list_String(deserializer);
    var var_createdAt = sse_decode_u_64(deserializer);
    var var_lastConnected = sse_decode_u_64(deserializer);
    var var_version = sse_decode_String(deserializer);
    return PeerInfo(
      peerId: var_peerId,
      hostname: var_hostname,
      os: var_os,
      publicIp: var_publicIp,
      privateIps: var_privateIps,
      createdAt: var_createdAt,
      lastConnected: var_lastConnected,
      version: var_version,
    );
  }

  @protected
  PeerWithInfo sse_decode_peer_with_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_peerId = sse_decode_String(deserializer);
    var var_peerInfo = sse_decode_opt_box_autoadd_peer_info(deserializer);
    return PeerWithInfo(peerId: var_peerId, peerInfo: var_peerInfo);
  }

  @protected
  TcpTunnelingConfig sse_decode_tcp_tunneling_config(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_forwardingEnabled = sse_decode_bool(deserializer);
    var var_listeningEnabled = sse_decode_bool(deserializer);
    var var_forwardingRules = sse_decode_list_forwarding_rule(deserializer);
    var var_listeningRules = sse_decode_list_listening_rule(deserializer);
    return TcpTunnelingConfig(
      forwardingEnabled: var_forwardingEnabled,
      listeningEnabled: var_listeningEnabled,
      forwardingRules: var_forwardingRules,
      listeningRules: var_listeningRules,
    );
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  WebdavProxy sse_decode_webdav_proxy(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_enabled = sse_decode_bool(deserializer);
    var var_host = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    return WebdavProxy(enabled: var_enabled, host: var_host, port: var_port);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_peer_info(
    PeerInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_peer_info(self, serializer);
  }

  @protected
  void sse_encode_file_transfer_client(
    FileTransferClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.enabled, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_String(self.peerId, serializer);
  }

  @protected
  void sse_encode_forwarding_rule(
    ForwardingRule self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.localHost, serializer);
    sse_encode_u_16(self.localPort, serializer);
    sse_encode_String(self.remotePeerId, serializer);
    sse_encode_u_16(self.remotePort, serializer);
  }

  @protected
  void sse_encode_ftp_proxy(FtpProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.enabled, serializer);
    sse_encode_String(self.host, serializer);
    sse_encode_u_16(self.port, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_file_transfer_client(
    List<FileTransferClient> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_file_transfer_client(item, serializer);
    }
  }

  @protected
  void sse_encode_list_forwarding_rule(
    List<ForwardingRule> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_forwarding_rule(item, serializer);
    }
  }

  @protected
  void sse_encode_list_listening_rule(
    List<ListeningRule> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_listening_rule(item, serializer);
    }
  }

  @protected
  void sse_encode_list_peer_info(
    List<PeerInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_peer_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_peer_with_info(
    List<PeerWithInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_peer_with_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_listening_rule(ListeningRule self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.host, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_list_String(self.allowedPeers, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_peer_info(
    PeerInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_peer_info(self, serializer);
    }
  }

  @protected
  void sse_encode_peer_info(PeerInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.peerId, serializer);
    sse_encode_opt_String(self.hostname, serializer);
    sse_encode_String(self.os, serializer);
    sse_encode_opt_String(self.publicIp, serializer);
    sse_encode_list_String(self.privateIps, serializer);
    sse_encode_u_64(self.createdAt, serializer);
    sse_encode_u_64(self.lastConnected, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_peer_with_info(PeerWithInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.peerId, serializer);
    sse_encode_opt_box_autoadd_peer_info(self.peerInfo, serializer);
  }

  @protected
  void sse_encode_tcp_tunneling_config(
    TcpTunnelingConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.forwardingEnabled, serializer);
    sse_encode_bool(self.listeningEnabled, serializer);
    sse_encode_list_forwarding_rule(self.forwardingRules, serializer);
    sse_encode_list_listening_rule(self.listeningRules, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_webdav_proxy(WebdavProxy self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.enabled, serializer);
    sse_encode_String(self.host, serializer);
    sse_encode_u_16(self.port, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
