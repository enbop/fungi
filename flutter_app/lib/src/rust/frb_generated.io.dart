// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/fungi.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  DeviceInfo dco_decode_device_info(dynamic raw);

  @protected
  FileTransferClient dco_decode_file_transfer_client(dynamic raw);

  @protected
  ForwardingRule dco_decode_forwarding_rule(dynamic raw);

  @protected
  FtpProxy dco_decode_ftp_proxy(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<DeviceInfo> dco_decode_list_device_info(dynamic raw);

  @protected
  List<FileTransferClient> dco_decode_list_file_transfer_client(dynamic raw);

  @protected
  List<ForwardingRule> dco_decode_list_forwarding_rule(dynamic raw);

  @protected
  List<ListeningRule> dco_decode_list_listening_rule(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  ListeningRule dco_decode_listening_rule(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  TcpTunnelingConfig dco_decode_tcp_tunneling_config(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  WebdavProxy dco_decode_webdav_proxy(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  DeviceInfo sse_decode_device_info(SseDeserializer deserializer);

  @protected
  FileTransferClient sse_decode_file_transfer_client(
    SseDeserializer deserializer,
  );

  @protected
  ForwardingRule sse_decode_forwarding_rule(SseDeserializer deserializer);

  @protected
  FtpProxy sse_decode_ftp_proxy(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<DeviceInfo> sse_decode_list_device_info(SseDeserializer deserializer);

  @protected
  List<FileTransferClient> sse_decode_list_file_transfer_client(
    SseDeserializer deserializer,
  );

  @protected
  List<ForwardingRule> sse_decode_list_forwarding_rule(
    SseDeserializer deserializer,
  );

  @protected
  List<ListeningRule> sse_decode_list_listening_rule(
    SseDeserializer deserializer,
  );

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  ListeningRule sse_decode_listening_rule(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  TcpTunnelingConfig sse_decode_tcp_tunneling_config(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  WebdavProxy sse_decode_webdav_proxy(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_device_info(DeviceInfo self, SseSerializer serializer);

  @protected
  void sse_encode_file_transfer_client(
    FileTransferClient self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_forwarding_rule(
    ForwardingRule self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_ftp_proxy(FtpProxy self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_device_info(
    List<DeviceInfo> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_file_transfer_client(
    List<FileTransferClient> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_forwarding_rule(
    List<ForwardingRule> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_listening_rule(
    List<ListeningRule> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_listening_rule(ListeningRule self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_tcp_tunneling_config(
    TcpTunnelingConfig self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_webdav_proxy(WebdavProxy self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
