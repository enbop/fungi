// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Empty {}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VersionResponse {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HostnameResponse {
    #[prost(string, tag = "1")]
    pub hostname: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PeerIdResponse {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ConfigFilePathResponse {
    #[prost(string, tag = "1")]
    pub config_file_path: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncomingAllowedPeersListResponse {
    #[prost(message, repeated, tag = "1")]
    pub peers: ::prost::alloc::vec::Vec<PeerInfo>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddIncomingAllowedPeerRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RemoveIncomingAllowedPeerRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FileTransferServiceEnabledResponse {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FileTransferServiceRootDirResponse {
    #[prost(string, tag = "1")]
    pub root_dir: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StartFileTransferServiceRequest {
    #[prost(string, tag = "1")]
    pub root_dir: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddFileTransferClientRequest {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RemoveFileTransferClientRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EnableFileTransferClientRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub enabled: bool,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FileTransferClient {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileTransferClientsResponse {
    #[prost(message, repeated, tag = "1")]
    pub clients: ::prost::alloc::vec::Vec<FileTransferClient>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FtpProxyResponse {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateFtpProxyRequest {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WebdavProxyResponse {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateWebdavProxyRequest {
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    #[prost(string, tag = "2")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ForwardingRule {
    #[prost(string, tag = "1")]
    pub local_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub local_port: i32,
    #[prost(string, tag = "3")]
    pub remote_peer_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub remote_port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListeningRule {
    #[prost(string, tag = "1")]
    pub host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub port: i32,
    #[prost(string, repeated, tag = "3")]
    pub allowed_peers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TcpTunnelingConfigResponse {
    #[prost(bool, tag = "1")]
    pub forwarding_enabled: bool,
    #[prost(bool, tag = "2")]
    pub listening_enabled: bool,
    #[prost(message, repeated, tag = "3")]
    pub forwarding_rules: ::prost::alloc::vec::Vec<ForwardingRule>,
    #[prost(message, repeated, tag = "4")]
    pub listening_rules: ::prost::alloc::vec::Vec<ListeningRule>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddTcpForwardingRuleRequest {
    #[prost(string, tag = "1")]
    pub local_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub local_port: i32,
    #[prost(string, tag = "3")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub remote_port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TcpForwardingRuleResponse {
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RemoveTcpForwardingRuleRequest {
    #[prost(string, tag = "1")]
    pub local_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub local_port: i32,
    #[prost(string, tag = "3")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub remote_port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AddTcpListeningRuleRequest {
    #[prost(string, tag = "1")]
    pub local_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub local_port: i32,
    #[prost(string, repeated, tag = "3")]
    pub allowed_peers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TcpListeningRuleResponse {
    #[prost(string, tag = "1")]
    pub rule_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RemoveTcpListeningRuleRequest {
    #[prost(string, tag = "1")]
    pub local_host: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub local_port: i32,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PeerInfo {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub alias: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub hostname: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub os: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub public_ip: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "6")]
    pub private_ips: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "7")]
    pub created_at: i64,
    #[prost(int64, tag = "8")]
    pub last_connected: i64,
    #[prost(string, tag = "9")]
    pub version: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PeerInfoListResponse {
    #[prost(message, repeated, tag = "1")]
    pub peers: ::prost::alloc::vec::Vec<PeerInfo>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PeerInfoResponse {
    #[prost(message, optional, tag = "1")]
    pub peer_info: ::core::option::Option<PeerInfo>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UpdateAddressBookPeerRequest {
    #[prost(message, optional, tag = "1")]
    pub peer_info: ::core::option::Option<PeerInfo>,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetAddressBookPeerRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RemoveAddressBookPeerRequest {
    #[prost(string, tag = "1")]
    pub peer_id: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod fungi_daemon_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct FungiDaemonClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FungiDaemonClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FungiDaemonClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FungiDaemonClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FungiDaemonClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns the running daemon version as a simple health check.
        pub async fn version(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::VersionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/Version",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "Version"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the libp2p peer ID of the daemon.
        pub async fn peer_id(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::PeerIdResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/PeerId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "PeerId"));
            self.inner.unary(req, path, codec).await
        }
        /// Reports the absolute path of the active configuration file.
        pub async fn config_file_path(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::ConfigFilePathResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/ConfigFilePath",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "ConfigFilePath"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the hostname advertised by the daemon.
        pub async fn hostname(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::HostnameResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/Hostname",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "Hostname"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists peers that are allowed to initiate incoming connections.
        pub async fn get_incoming_allowed_peers(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::IncomingAllowedPeersListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetIncomingAllowedPeers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "GetIncomingAllowedPeers",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Adds a peer ID to the allowlist for incoming connections and persists it.
        pub async fn add_incoming_allowed_peer(
            &mut self,
            request: impl tonic::IntoRequest<super::AddIncomingAllowedPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/AddIncomingAllowedPeer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "AddIncomingAllowedPeer"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Removes a peer ID from the allowlist for incoming connections.
        pub async fn remove_incoming_allowed_peer(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveIncomingAllowedPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/RemoveIncomingAllowedPeer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "RemoveIncomingAllowedPeer",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Indicates whether the embedded file transfer service is running.
        pub async fn get_file_transfer_service_enabled(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferServiceEnabledResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetFileTransferServiceEnabled",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "GetFileTransferServiceEnabled",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the root directory shared by the file transfer service.
        pub async fn get_file_transfer_service_root_dir(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferServiceRootDirResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetFileTransferServiceRootDir",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "GetFileTransferServiceRootDir",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Starts the file transfer service with a new root directory, updating
        /// config.
        pub async fn start_file_transfer_service(
            &mut self,
            request: impl tonic::IntoRequest<super::StartFileTransferServiceRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/StartFileTransferService",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "StartFileTransferService",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Stops the running file transfer service and updates the stored config.
        pub async fn stop_file_transfer_service(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/StopFileTransferService",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "StopFileTransferService",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Registers a remote file transfer client and optionally enables it
        /// immediately.
        pub async fn add_file_transfer_client(
            &mut self,
            request: impl tonic::IntoRequest<super::AddFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/AddFileTransferClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "AddFileTransferClient"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Removes a remote file transfer client and forgets its configuration.
        pub async fn remove_file_transfer_client(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/RemoveFileTransferClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "RemoveFileTransferClient",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Enables or disables a remote file transfer client and syncs its metadata.
        pub async fn enable_file_transfer_client(
            &mut self,
            request: impl tonic::IntoRequest<super::EnableFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/EnableFileTransferClient",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "EnableFileTransferClient",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists all configured remote file transfer clients with their status.
        pub async fn get_all_file_transfer_clients(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferClientsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetAllFileTransferClients",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "GetAllFileTransferClients",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the current FTP proxy settings for the file transfer service.
        pub async fn get_ftp_proxy(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FtpProxyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetFtpProxy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "GetFtpProxy"));
            self.inner.unary(req, path, codec).await
        }
        /// Updates the FTP proxy binding and restarts the proxy task if needed.
        pub async fn update_ftp_proxy(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateFtpProxyRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/UpdateFtpProxy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "UpdateFtpProxy"));
            self.inner.unary(req, path, codec).await
        }
        /// Returns the current WebDAV proxy settings for the file transfer service.
        pub async fn get_webdav_proxy(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::WebdavProxyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetWebdavProxy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "GetWebdavProxy"));
            self.inner.unary(req, path, codec).await
        }
        /// Updates the WebDAV proxy binding and restarts the proxy task if needed.
        pub async fn update_webdav_proxy(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateWebdavProxyRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/UpdateWebdavProxy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "UpdateWebdavProxy"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the complete TCP tunneling configuration including current rules.
        pub async fn get_tcp_tunneling_config(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::TcpTunnelingConfigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetTcpTunnelingConfig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "GetTcpTunnelingConfig"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new TCP forwarding rule and returns its generated identifier.
        pub async fn add_tcp_forwarding_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::AddTcpForwardingRuleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TcpForwardingRuleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/AddTcpForwardingRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "AddTcpForwardingRule"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes an existing TCP forwarding rule by identifier.
        pub async fn remove_tcp_forwarding_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveTcpForwardingRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/RemoveTcpForwardingRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "fungi_daemon.FungiDaemon",
                        "RemoveTcpForwardingRule",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new TCP listening rule and returns its generated identifier.
        pub async fn add_tcp_listening_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::AddTcpListeningRuleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TcpListeningRuleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/AddTcpListeningRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "AddTcpListeningRule"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes an existing TCP listening rule by identifier.
        pub async fn remove_tcp_listening_rule(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveTcpListeningRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/RemoveTcpListeningRule",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "RemoveTcpListeningRule"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns latest metadata for peers discovered via mDNS.
        pub async fn list_mdns_devices(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/ListMdnsDevices",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("fungi_daemon.FungiDaemon", "ListMdnsDevices"));
            self.inner.unary(req, path, codec).await
        }
        /// Lists every peer stored in the address book.
        pub async fn list_address_book_peers(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoListResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/ListAddressBookPeers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "ListAddressBookPeers"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Inserts or updates a peer entry in the address book.
        pub async fn update_address_book_peer(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateAddressBookPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/UpdateAddressBookPeer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "UpdateAddressBookPeer"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns detailed information for a single address book peer.
        pub async fn get_address_book_peer(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAddressBookPeerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/GetAddressBookPeer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "GetAddressBookPeer"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Removes a peer from the address book.
        pub async fn remove_address_book_peer(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveAddressBookPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/fungi_daemon.FungiDaemon/RemoveAddressBookPeer",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("fungi_daemon.FungiDaemon", "RemoveAddressBookPeer"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod fungi_daemon_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FungiDaemonServer.
    #[async_trait]
    pub trait FungiDaemon: std::marker::Send + std::marker::Sync + 'static {
        /// Returns the running daemon version as a simple health check.
        async fn version(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::VersionResponse>, tonic::Status>;
        /// Returns the libp2p peer ID of the daemon.
        async fn peer_id(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::PeerIdResponse>, tonic::Status>;
        /// Reports the absolute path of the active configuration file.
        async fn config_file_path(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::ConfigFilePathResponse>,
            tonic::Status,
        >;
        /// Returns the hostname advertised by the daemon.
        async fn hostname(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::HostnameResponse>,
            tonic::Status,
        >;
        /// Lists peers that are allowed to initiate incoming connections.
        async fn get_incoming_allowed_peers(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::IncomingAllowedPeersListResponse>,
            tonic::Status,
        >;
        /// Adds a peer ID to the allowlist for incoming connections and persists it.
        async fn add_incoming_allowed_peer(
            &self,
            request: tonic::Request<super::AddIncomingAllowedPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Removes a peer ID from the allowlist for incoming connections.
        async fn remove_incoming_allowed_peer(
            &self,
            request: tonic::Request<super::RemoveIncomingAllowedPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Indicates whether the embedded file transfer service is running.
        async fn get_file_transfer_service_enabled(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferServiceEnabledResponse>,
            tonic::Status,
        >;
        /// Returns the root directory shared by the file transfer service.
        async fn get_file_transfer_service_root_dir(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferServiceRootDirResponse>,
            tonic::Status,
        >;
        /// Starts the file transfer service with a new root directory, updating
        /// config.
        async fn start_file_transfer_service(
            &self,
            request: tonic::Request<super::StartFileTransferServiceRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Stops the running file transfer service and updates the stored config.
        async fn stop_file_transfer_service(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Registers a remote file transfer client and optionally enables it
        /// immediately.
        async fn add_file_transfer_client(
            &self,
            request: tonic::Request<super::AddFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Removes a remote file transfer client and forgets its configuration.
        async fn remove_file_transfer_client(
            &self,
            request: tonic::Request<super::RemoveFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Enables or disables a remote file transfer client and syncs its metadata.
        async fn enable_file_transfer_client(
            &self,
            request: tonic::Request<super::EnableFileTransferClientRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Lists all configured remote file transfer clients with their status.
        async fn get_all_file_transfer_clients(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FileTransferClientsResponse>,
            tonic::Status,
        >;
        /// Returns the current FTP proxy settings for the file transfer service.
        async fn get_ftp_proxy(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::FtpProxyResponse>,
            tonic::Status,
        >;
        /// Updates the FTP proxy binding and restarts the proxy task if needed.
        async fn update_ftp_proxy(
            &self,
            request: tonic::Request<super::UpdateFtpProxyRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Returns the current WebDAV proxy settings for the file transfer service.
        async fn get_webdav_proxy(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::WebdavProxyResponse>,
            tonic::Status,
        >;
        /// Updates the WebDAV proxy binding and restarts the proxy task if needed.
        async fn update_webdav_proxy(
            &self,
            request: tonic::Request<super::UpdateWebdavProxyRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Returns the complete TCP tunneling configuration including current rules.
        async fn get_tcp_tunneling_config(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::TcpTunnelingConfigResponse>,
            tonic::Status,
        >;
        /// Creates a new TCP forwarding rule and returns its generated identifier.
        async fn add_tcp_forwarding_rule(
            &self,
            request: tonic::Request<super::AddTcpForwardingRuleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TcpForwardingRuleResponse>,
            tonic::Status,
        >;
        /// Deletes an existing TCP forwarding rule by identifier.
        async fn remove_tcp_forwarding_rule(
            &self,
            request: tonic::Request<super::RemoveTcpForwardingRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Creates a new TCP listening rule and returns its generated identifier.
        async fn add_tcp_listening_rule(
            &self,
            request: tonic::Request<super::AddTcpListeningRuleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TcpListeningRuleResponse>,
            tonic::Status,
        >;
        /// Deletes an existing TCP listening rule by identifier.
        async fn remove_tcp_listening_rule(
            &self,
            request: tonic::Request<super::RemoveTcpListeningRuleRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Returns latest metadata for peers discovered via mDNS.
        async fn list_mdns_devices(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoListResponse>,
            tonic::Status,
        >;
        /// Lists every peer stored in the address book.
        async fn list_address_book_peers(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoListResponse>,
            tonic::Status,
        >;
        /// Inserts or updates a peer entry in the address book.
        async fn update_address_book_peer(
            &self,
            request: tonic::Request<super::UpdateAddressBookPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Returns detailed information for a single address book peer.
        async fn get_address_book_peer(
            &self,
            request: tonic::Request<super::GetAddressBookPeerRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PeerInfoResponse>,
            tonic::Status,
        >;
        /// Removes a peer from the address book.
        async fn remove_address_book_peer(
            &self,
            request: tonic::Request<super::RemoveAddressBookPeerRequest>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct FungiDaemonServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FungiDaemonServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FungiDaemonServer<T>
    where
        T: FungiDaemon,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/fungi_daemon.FungiDaemon/Version" => {
                    #[allow(non_camel_case_types)]
                    struct VersionSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for VersionSvc<T> {
                        type Response = super::VersionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::version(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VersionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/PeerId" => {
                    #[allow(non_camel_case_types)]
                    struct PeerIdSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for PeerIdSvc<T> {
                        type Response = super::PeerIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::peer_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PeerIdSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/ConfigFilePath" => {
                    #[allow(non_camel_case_types)]
                    struct ConfigFilePathSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for ConfigFilePathSvc<T> {
                        type Response = super::ConfigFilePathResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::config_file_path(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ConfigFilePathSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/Hostname" => {
                    #[allow(non_camel_case_types)]
                    struct HostnameSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for HostnameSvc<T> {
                        type Response = super::HostnameResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::hostname(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HostnameSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetIncomingAllowedPeers" => {
                    #[allow(non_camel_case_types)]
                    struct GetIncomingAllowedPeersSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetIncomingAllowedPeersSvc<T> {
                        type Response = super::IncomingAllowedPeersListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_incoming_allowed_peers(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIncomingAllowedPeersSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/AddIncomingAllowedPeer" => {
                    #[allow(non_camel_case_types)]
                    struct AddIncomingAllowedPeerSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::AddIncomingAllowedPeerRequest>
                    for AddIncomingAllowedPeerSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddIncomingAllowedPeerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::add_incoming_allowed_peer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddIncomingAllowedPeerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/RemoveIncomingAllowedPeer" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveIncomingAllowedPeerSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<
                        super::RemoveIncomingAllowedPeerRequest,
                    > for RemoveIncomingAllowedPeerSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveIncomingAllowedPeerRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::remove_incoming_allowed_peer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveIncomingAllowedPeerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetFileTransferServiceEnabled" => {
                    #[allow(non_camel_case_types)]
                    struct GetFileTransferServiceEnabledSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetFileTransferServiceEnabledSvc<T> {
                        type Response = super::FileTransferServiceEnabledResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_file_transfer_service_enabled(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFileTransferServiceEnabledSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetFileTransferServiceRootDir" => {
                    #[allow(non_camel_case_types)]
                    struct GetFileTransferServiceRootDirSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetFileTransferServiceRootDirSvc<T> {
                        type Response = super::FileTransferServiceRootDirResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_file_transfer_service_root_dir(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFileTransferServiceRootDirSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/StartFileTransferService" => {
                    #[allow(non_camel_case_types)]
                    struct StartFileTransferServiceSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::StartFileTransferServiceRequest>
                    for StartFileTransferServiceSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::StartFileTransferServiceRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::start_file_transfer_service(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartFileTransferServiceSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/StopFileTransferService" => {
                    #[allow(non_camel_case_types)]
                    struct StopFileTransferServiceSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for StopFileTransferServiceSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::stop_file_transfer_service(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StopFileTransferServiceSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/AddFileTransferClient" => {
                    #[allow(non_camel_case_types)]
                    struct AddFileTransferClientSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::AddFileTransferClientRequest>
                    for AddFileTransferClientSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddFileTransferClientRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::add_file_transfer_client(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddFileTransferClientSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/RemoveFileTransferClient" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveFileTransferClientSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::RemoveFileTransferClientRequest>
                    for RemoveFileTransferClientSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveFileTransferClientRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::remove_file_transfer_client(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveFileTransferClientSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/EnableFileTransferClient" => {
                    #[allow(non_camel_case_types)]
                    struct EnableFileTransferClientSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::EnableFileTransferClientRequest>
                    for EnableFileTransferClientSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::EnableFileTransferClientRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::enable_file_transfer_client(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EnableFileTransferClientSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetAllFileTransferClients" => {
                    #[allow(non_camel_case_types)]
                    struct GetAllFileTransferClientsSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetAllFileTransferClientsSvc<T> {
                        type Response = super::FileTransferClientsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_all_file_transfer_clients(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAllFileTransferClientsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetFtpProxy" => {
                    #[allow(non_camel_case_types)]
                    struct GetFtpProxySvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetFtpProxySvc<T> {
                        type Response = super::FtpProxyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_ftp_proxy(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFtpProxySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/UpdateFtpProxy" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateFtpProxySvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::UpdateFtpProxyRequest>
                    for UpdateFtpProxySvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateFtpProxyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::update_ftp_proxy(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateFtpProxySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetWebdavProxy" => {
                    #[allow(non_camel_case_types)]
                    struct GetWebdavProxySvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetWebdavProxySvc<T> {
                        type Response = super::WebdavProxyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_webdav_proxy(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetWebdavProxySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/UpdateWebdavProxy" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateWebdavProxySvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::UpdateWebdavProxyRequest>
                    for UpdateWebdavProxySvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateWebdavProxyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::update_webdav_proxy(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateWebdavProxySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetTcpTunnelingConfig" => {
                    #[allow(non_camel_case_types)]
                    struct GetTcpTunnelingConfigSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for GetTcpTunnelingConfigSvc<T> {
                        type Response = super::TcpTunnelingConfigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_tcp_tunneling_config(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTcpTunnelingConfigSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/AddTcpForwardingRule" => {
                    #[allow(non_camel_case_types)]
                    struct AddTcpForwardingRuleSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::AddTcpForwardingRuleRequest>
                    for AddTcpForwardingRuleSvc<T> {
                        type Response = super::TcpForwardingRuleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddTcpForwardingRuleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::add_tcp_forwarding_rule(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddTcpForwardingRuleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/RemoveTcpForwardingRule" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveTcpForwardingRuleSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::RemoveTcpForwardingRuleRequest>
                    for RemoveTcpForwardingRuleSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RemoveTcpForwardingRuleRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::remove_tcp_forwarding_rule(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveTcpForwardingRuleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/AddTcpListeningRule" => {
                    #[allow(non_camel_case_types)]
                    struct AddTcpListeningRuleSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::AddTcpListeningRuleRequest>
                    for AddTcpListeningRuleSvc<T> {
                        type Response = super::TcpListeningRuleResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddTcpListeningRuleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::add_tcp_listening_rule(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AddTcpListeningRuleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/RemoveTcpListeningRule" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveTcpListeningRuleSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::RemoveTcpListeningRuleRequest>
                    for RemoveTcpListeningRuleSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveTcpListeningRuleRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::remove_tcp_listening_rule(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveTcpListeningRuleSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/ListMdnsDevices" => {
                    #[allow(non_camel_case_types)]
                    struct ListMdnsDevicesSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for ListMdnsDevicesSvc<T> {
                        type Response = super::PeerInfoListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::list_mdns_devices(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListMdnsDevicesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/ListAddressBookPeers" => {
                    #[allow(non_camel_case_types)]
                    struct ListAddressBookPeersSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<T: FungiDaemon> tonic::server::UnaryService<super::Empty>
                    for ListAddressBookPeersSvc<T> {
                        type Response = super::PeerInfoListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::list_address_book_peers(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListAddressBookPeersSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/UpdateAddressBookPeer" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateAddressBookPeerSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::UpdateAddressBookPeerRequest>
                    for UpdateAddressBookPeerSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateAddressBookPeerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::update_address_book_peer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateAddressBookPeerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/GetAddressBookPeer" => {
                    #[allow(non_camel_case_types)]
                    struct GetAddressBookPeerSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::GetAddressBookPeerRequest>
                    for GetAddressBookPeerSvc<T> {
                        type Response = super::PeerInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAddressBookPeerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::get_address_book_peer(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAddressBookPeerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/fungi_daemon.FungiDaemon/RemoveAddressBookPeer" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveAddressBookPeerSvc<T: FungiDaemon>(pub Arc<T>);
                    impl<
                        T: FungiDaemon,
                    > tonic::server::UnaryService<super::RemoveAddressBookPeerRequest>
                    for RemoveAddressBookPeerSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveAddressBookPeerRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FungiDaemon>::remove_address_book_peer(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveAddressBookPeerSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for FungiDaemonServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "fungi_daemon.FungiDaemon";
    impl<T> tonic::server::NamedService for FungiDaemonServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
