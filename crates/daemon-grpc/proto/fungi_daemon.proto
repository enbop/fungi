syntax = "proto3";

package fungi_daemon;

service FungiDaemon {
  // Get the version of the Fungi Daemon.
  // Also used to check if the daemon is running.
  rpc Version(Empty) returns (VersionResponse) {}

  rpc PeerId(Empty) returns (PeerIdResponse) {}
  rpc ConfigFilePath(Empty) returns (ConfigFilePathResponse) {}
  rpc Hostname(Empty) returns (HostnameResponse) {}

  rpc GetIncomingAllowedPeers(Empty)
      returns (IncomingAllowedPeersListResponse) {}
  rpc AddIncomingAllowedPeer(AddIncomingAllowedPeerRequest) returns (Empty) {}
  rpc RemoveIncomingAllowedPeer(RemoveIncomingAllowedPeerRequest)
      returns (Empty) {}

  rpc GetFileTransferServiceEnabled(Empty)
      returns (FileTransferServiceEnabledResponse) {}
  rpc GetFileTransferServiceRootDir(Empty)
      returns (FileTransferServiceRootDirResponse) {}
  rpc StartFileTransferService(StartFileTransferServiceRequest)
      returns (Empty) {}
  rpc StopFileTransferService(Empty) returns (Empty) {}

  rpc AddFileTransferClient(AddFileTransferClientRequest) returns (Empty) {}
  rpc RemoveFileTransferClient(RemoveFileTransferClientRequest)
      returns (Empty) {}
  rpc EnableFileTransferClient(EnableFileTransferClientRequest)
      returns (Empty) {}
  rpc GetAllFileTransferClients(Empty) returns (FileTransferClientsResponse) {}

  rpc GetFtpProxy(Empty) returns (FtpProxyResponse) {}
  rpc UpdateFtpProxy(UpdateFtpProxyRequest) returns (Empty) {}
  rpc GetWebdavProxy(Empty) returns (WebdavProxyResponse) {}
  rpc UpdateWebdavProxy(UpdateWebdavProxyRequest) returns (Empty) {}

  rpc GetTcpTunnelingConfig(Empty) returns (TcpTunnelingConfigResponse) {}
  rpc AddTcpForwardingRule(AddTcpForwardingRuleRequest)
      returns (TcpForwardingRuleResponse) {}
  rpc RemoveTcpForwardingRule(RemoveTcpForwardingRuleRequest) returns (Empty) {}
  rpc AddTcpListeningRule(AddTcpListeningRuleRequest)
      returns (TcpListeningRuleResponse) {}
  rpc RemoveTcpListeningRule(RemoveTcpListeningRuleRequest) returns (Empty) {}

  rpc MdnsGetLocalDevices(Empty) returns (PeerInfoListResponse) {}
  rpc GetAllAddressBook(Empty) returns (PeerInfoListResponse) {}
  rpc AddressBookAddOrUpdate(AddressBookAddOrUpdateRequest) returns (Empty) {}
  rpc AddressBookGetPeer(AddressBookGetPeerRequest) returns (PeerInfoResponse) {
  }
  rpc AddressBookRemove(AddressBookRemoveRequest) returns (Empty) {}
}

message Empty {}

message VersionResponse { string version = 1; }

message HostnameResponse { string hostname = 1; }

message StartFungiDaemonRequest { string fungi_dir = 1; }

message PeerIdResponse { string peer_id = 1; }

message ConfigFilePathResponse { string config_file_path = 1; }

message IncomingAllowedPeersListResponse { repeated PeerInfo peers = 1; }

message AddIncomingAllowedPeerRequest { string peer_id = 1; }

message RemoveIncomingAllowedPeerRequest { string peer_id = 1; }

message FileTransferServiceEnabledResponse { bool enabled = 1; }

message FileTransferServiceRootDirResponse { string root_dir = 1; }

message StartFileTransferServiceRequest { string root_dir = 1; }

message AddFileTransferClientRequest {
  bool enabled = 1;
  string name = 2;
  string peer_id = 3;
}

message RemoveFileTransferClientRequest { string peer_id = 1; }

message EnableFileTransferClientRequest {
  string peer_id = 1;
  bool enabled = 2;
}

message FileTransferClient {
  bool enabled = 1;
  string name = 2;
  string peer_id = 3;
}

message FileTransferClientsResponse { repeated FileTransferClient clients = 1; }

message FtpProxyResponse {
  bool enabled = 1;
  string host = 2;
  int32 port = 3;
}

message UpdateFtpProxyRequest {
  bool enabled = 1;
  string host = 2;
  int32 port = 3;
}

message WebdavProxyResponse {
  bool enabled = 1;
  string host = 2;
  int32 port = 3;
}

message UpdateWebdavProxyRequest {
  bool enabled = 1;
  string host = 2;
  int32 port = 3;
}

message ForwardingRule {
  string local_host = 1;
  int32 local_port = 2;
  string remote_peer_id = 3;
  int32 remote_port = 4;
}

message ListeningRule {
  string host = 1;
  int32 port = 2;
  repeated string allowed_peers = 3;
}

message TcpTunnelingConfigResponse {
  bool forwarding_enabled = 1;
  bool listening_enabled = 2;
  repeated ForwardingRule forwarding_rules = 3;
  repeated ListeningRule listening_rules = 4;
}

message AddTcpForwardingRuleRequest {
  string local_host = 1;
  int32 local_port = 2;
  string peer_id = 3;
  int32 remote_port = 4;
}

message TcpForwardingRuleResponse { string rule_id = 1; }

message RemoveTcpForwardingRuleRequest { string rule_id = 1; }

message AddTcpListeningRuleRequest {
  string local_host = 1;
  int32 local_port = 2;
  repeated string allowed_peers = 3;
}

message TcpListeningRuleResponse { string rule_id = 1; }

message RemoveTcpListeningRuleRequest { string rule_id = 1; }

message PeerInfo {
  string peer_id = 1;
  string alias = 2;
  string hostname = 3;
  string os = 4;
  string public_ip = 5;
  repeated string private_ips = 6;
  int64 created_at = 7;
  int64 last_connected = 8;
  string version = 9;
}

message PeerInfoListResponse { repeated PeerInfo peers = 1; }

message PeerInfoResponse { PeerInfo peer_info = 1; }

message AddressBookAddOrUpdateRequest { PeerInfo peer_info = 1; }

message AddressBookGetPeerRequest { string peer_id = 1; }

message AddressBookRemoveRequest { string peer_id = 1; }